;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name walker.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {setup {:protocol-inline nil, :meta {:file "/Users/mike/Documents/proj/personal/nc/walker/src/walker/core.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([]))}, :name walker.core/setup, :variadic false, :file "src/walker/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "/Users/mike/Documents/proj/personal/nc/walker/src/walker/core.cljs", :line 16, :column 7, :end-line 16, :end-column 19, :arglists (quote ([state]))}, :name walker.core/update-state, :variadic false, :file "src/walker/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-state {:protocol-inline nil, :meta {:file "/Users/mike/Documents/proj/personal/nc/walker/src/walker/core.cljs", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([state]))}, :name walker.core/draw-state, :variadic false, :file "src/walker/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, walker {:protocol-inline nil, :meta {:file "/Users/mike/Documents/proj/personal/nc/walker/src/walker/core.cljs", :line 40, :column 14, :end-line 40, :end-column 20, :export true, :arglists (quote ([]))}, :name walker.core/walker, :variadic false, :file "src/walker/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :hsb :fn :color :update :size :setup :middleware :host :host-id :no-start :x :draw}, :order [:hsb :color :x :y :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}